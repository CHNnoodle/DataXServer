<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.tianlangstudio.data.hamal</groupId>
		<artifactId>data-hamal</artifactId>
		<version>2.0.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath> <!-- lookup parent from repository -->
	</parent>
	<groupId>org.tianlangstudio.data.hamal</groupId>
	<artifactId>hamal-http-server</artifactId>
	<packaging>jar</packaging>
	<name>Hamal HTTP Server</name>
	<description>Data Hamal HTTP Server</description>
	<dependencies>
		<dependency>
			<groupId>org.tianlangstudio.data.hamal</groupId>
			<artifactId>hamal-core</artifactId>
			<version>${data-hamal-version}</version>
		</dependency>
		<dependency>
			<groupId>${akka.group}</groupId>
			<artifactId>akka-actor_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>${akka.group}</groupId>
			<artifactId>akka-http_${scala.binary.version}</artifactId>
			<!--<version>10.1.9</version>-->
		</dependency>
		<dependency>
			<groupId>${akka.group}</groupId>
			<artifactId>akka-stream_${scala.binary.version}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		<dependency>
			<groupId>${akka.group}</groupId>
			<artifactId>akka-http-spray-json_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j-api-version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-version}</version>
		</dependency>
	</dependencies>
	<build>
		 <resources>
             <resource>
                 <directory>src/main/resources</directory>
             </resource>
         </resources>
         <testResources>
             <testResource>
                 <directory>src/test/resources</directory>
             </testResource>
         </testResources>
         <outputDirectory>target/scala-${scala.binary.version}/classes</outputDirectory>
         <testOutputDirectory>target/scala-${scala.binary.version}/test-classes</testOutputDirectory>
       <plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>2.12.4</version>
			<configuration>
				<forkMode>once</forkMode>
				<argLine>-Dfile.encoding=UTF-8</argLine>
			</configuration>
		</plugin>

		<plugin>
			<groupId>net.alchim31.maven</groupId>
			<artifactId>scala-maven-plugin</artifactId>
			<version>4.2.4</version>
			<executions>
				<execution>
					<id>scala-compile-first</id>
					<phase>process-resources</phase>
					<goals>
						<goal>compile</goal>
					</goals>
				</execution>
				<execution>
					<id>scala-test-compile-first</id>
					<phase>process-test-resources</phase>
					<goals>
						<goal>testCompile</goal>
					</goals>
				</execution>
			</executions>
			<configuration>
				<scalaVersion>${scala.version}</scalaVersion>
				<recompileMode>incremental</recompileMode>
				<useZincServer>true</useZincServer>
				<!--<args>
					<arg>-unchecked</arg>
					<arg>-deprecation</arg>
					<arg>-feature</arg>
				</args>-->
				<jvmArgs>
					<jvmArg>-Xms1024m</jvmArg>
					<jvmArg>-Xmx1024m</jvmArg>
					<jvmArg>-XX:PermSize=${PermGen}</jvmArg>
					<jvmArg>-XX:MaxPermSize=${MaxPermGen}</jvmArg>
					<jvmArg>-XX:ReservedCodeCacheSize=${CodeCacheSize}</jvmArg>
					<jvmArg>-Dfile.encoding=UTF-8</jvmArg>
				</jvmArgs>
				<javacArgs>
					<javacArg>-source</javacArg>
					<javacArg>${java.version}</javacArg>
					<javacArg>-target</javacArg>
					<javacArg>${java.version}</javacArg>
					<javacArg>-Xlint:all,-serial,-path</javacArg>
				</javacArgs>
				<launchers>
					<launcher>
						<id>httpserver</id>
						<mainClass>org.tianlangstudio.data.hamal.server.http.HttpServerApp</mainClass>
						<args>
							<!--并发度 使用多少个线程运行任务-->
							<arg>3</arg>
						</args>
						<jvmArgs>
							<jvmArg>-Ddatax.home=${datax-home}</jvmArg>
						</jvmArgs>
					</launcher>
				</launchers>
			</configuration>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.3</version>
			<configuration>
				<source>${java.version}</source>
				<target>${java.version}</target>
				<encoding>UTF-8</encoding>
				<maxmem>1024m</maxmem>
				<fork>true</fork>
				<compilerArgs>
					<arg>-Xlint:all,-serial,-path</arg>
				</compilerArgs>
			</configuration>
		</plugin>
		<!--<plugin>
			<groupId>net.alchim31.maven</groupId>
			<artifactId>scala-maven-plugin</artifactId>
			<version>4.2.4</version>
			<configuration>
				<launchers>
					<launcher>
						<id>httpserver</id>
						<mainClass>org.tianlangstudio.data.hamal.server.http.HttpServerApp</mainClass>
						<args>
							&lt;!&ndash;并发度 使用多少个线程运行任务&ndash;&gt;
							<arg>3</arg>
						</args>
						&lt;!&ndash; jvmArgs are optional &ndash;&gt;
						<jvmArgs>
							<jvmArg>-Ddatax.home=/data/test/datax.</jvmArg>
						</jvmArgs>
					</launcher>
					&lt;!&ndash; you could define other launcher &ndash;&gt;
				</launchers>
			</configuration>
		</plugin>-->
	</plugins>
	</build>

</project>
