//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ThriftServer_types');
//HELPER FUNCTIONS AND STRUCTURES

var ThriftServer_submitJob_args = function(args) {
  this.jobConfPath = null;
  if (args) {
    if (args.jobConfPath !== undefined && args.jobConfPath !== null) {
      this.jobConfPath = args.jobConfPath;
    }
  }
};
ThriftServer_submitJob_args.prototype = {};
ThriftServer_submitJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobConfPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_submitJob_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_submitJob_args');
  if (this.jobConfPath !== null && this.jobConfPath !== undefined) {
    output.writeFieldBegin('jobConfPath', Thrift.Type.STRING, 1);
    output.writeString(this.jobConfPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_submitJob_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftServer_submitJob_result.prototype = {};
ThriftServer_submitJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_submitJob_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_submitJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_submitJobWithParams_args = function(args) {
  this.jobConfPath = null;
  this.params = null;
  if (args) {
    if (args.jobConfPath !== undefined && args.jobConfPath !== null) {
      this.jobConfPath = args.jobConfPath;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyMap(args.params, [null]);
    }
  }
};
ThriftServer_submitJobWithParams_args.prototype = {};
ThriftServer_submitJobWithParams_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobConfPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.params = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.params[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_submitJobWithParams_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_submitJobWithParams_args');
  if (this.jobConfPath !== null && this.jobConfPath !== undefined) {
    output.writeFieldBegin('jobConfPath', Thrift.Type.STRING, 1);
    output.writeString(this.jobConfPath);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.params));
    for (var kiter8 in this.params)
    {
      if (this.params.hasOwnProperty(kiter8))
      {
        var viter9 = this.params[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_submitJobWithParams_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftServer_submitJobWithParams_result.prototype = {};
ThriftServer_submitJobWithParams_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_submitJobWithParams_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_submitJobWithParams_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_getJobStatus_args = function(args) {
  this.jobId = null;
  if (args) {
    if (args.jobId !== undefined && args.jobId !== null) {
      this.jobId = args.jobId;
    }
  }
};
ThriftServer_getJobStatus_args.prototype = {};
ThriftServer_getJobStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_getJobStatus_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_getJobStatus_args');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 1);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_getJobStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftServer_getJobStatus_result.prototype = {};
ThriftServer_getJobStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_getJobStatus_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_getJobStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_cancelJob_args = function(args) {
  this.jobId = null;
  if (args) {
    if (args.jobId !== undefined && args.jobId !== null) {
      this.jobId = args.jobId;
    }
  }
};
ThriftServer_cancelJob_args.prototype = {};
ThriftServer_cancelJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_cancelJob_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_cancelJob_args');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 1);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_cancelJob_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ThriftServer_cancelJob_result.prototype = {};
ThriftServer_cancelJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_cancelJob_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_cancelJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_getJobResult_args = function(args) {
  this.jobId = null;
  if (args) {
    if (args.jobId !== undefined && args.jobId !== null) {
      this.jobId = args.jobId;
    }
  }
};
ThriftServer_getJobResult_args.prototype = {};
ThriftServer_getJobResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_getJobResult_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_getJobResult_args');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 1);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_getJobResult_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TaskResult(args.success);
    }
  }
};
ThriftServer_getJobResult_result.prototype = {};
ThriftServer_getJobResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TaskResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_getJobResult_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_getJobResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_getJobCost_args = function(args) {
  this.jobId = null;
  if (args) {
    if (args.jobId !== undefined && args.jobId !== null) {
      this.jobId = args.jobId;
    }
  }
};
ThriftServer_getJobCost_args.prototype = {};
ThriftServer_getJobCost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_getJobCost_args.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_getJobCost_args');
  if (this.jobId !== null && this.jobId !== undefined) {
    output.writeFieldBegin('jobId', Thrift.Type.STRING, 1);
    output.writeString(this.jobId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServer_getJobCost_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TaskCost(args.success);
    }
  }
};
ThriftServer_getJobCost_result.prototype = {};
ThriftServer_getJobCost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TaskCost();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftServer_getJobCost_result.prototype.write = function(output) {
  output.writeStructBegin('ThriftServer_getJobCost_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ThriftServerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ThriftServerClient.prototype = {};
ThriftServerClient.prototype.seqid = function() { return this._seqid; };
ThriftServerClient.prototype.new_seqid = function() { return this._seqid += 1; };
ThriftServerClient.prototype.submitJob = function(jobConfPath, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitJob(jobConfPath);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitJob(jobConfPath);
  }
};

ThriftServerClient.prototype.send_submitJob = function(jobConfPath) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitJob', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftServer_submitJob_args();
  args.jobConfPath = jobConfPath;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftServerClient.prototype.recv_submitJob = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftServer_submitJob_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('submitJob failed: unknown result');
};
ThriftServerClient.prototype.submitJobWithParams = function(jobConfPath, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitJobWithParams(jobConfPath, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitJobWithParams(jobConfPath, params);
  }
};

ThriftServerClient.prototype.send_submitJobWithParams = function(jobConfPath, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitJobWithParams', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftServer_submitJobWithParams_args();
  args.jobConfPath = jobConfPath;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftServerClient.prototype.recv_submitJobWithParams = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftServer_submitJobWithParams_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('submitJobWithParams failed: unknown result');
};
ThriftServerClient.prototype.getJobStatus = function(jobId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getJobStatus(jobId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getJobStatus(jobId);
  }
};

ThriftServerClient.prototype.send_getJobStatus = function(jobId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getJobStatus', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftServer_getJobStatus_args();
  args.jobId = jobId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftServerClient.prototype.recv_getJobStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftServer_getJobStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getJobStatus failed: unknown result');
};
ThriftServerClient.prototype.cancelJob = function(jobId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelJob(jobId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelJob(jobId);
  }
};

ThriftServerClient.prototype.send_cancelJob = function(jobId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelJob', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftServer_cancelJob_args();
  args.jobId = jobId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftServerClient.prototype.recv_cancelJob = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftServer_cancelJob_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cancelJob failed: unknown result');
};
ThriftServerClient.prototype.getJobResult = function(jobId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getJobResult(jobId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getJobResult(jobId);
  }
};

ThriftServerClient.prototype.send_getJobResult = function(jobId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getJobResult', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftServer_getJobResult_args();
  args.jobId = jobId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftServerClient.prototype.recv_getJobResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftServer_getJobResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getJobResult failed: unknown result');
};
ThriftServerClient.prototype.getJobCost = function(jobId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getJobCost(jobId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getJobCost(jobId);
  }
};

ThriftServerClient.prototype.send_getJobCost = function(jobId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getJobCost', Thrift.MessageType.CALL, this.seqid());
  var args = new ThriftServer_getJobCost_args();
  args.jobId = jobId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ThriftServerClient.prototype.recv_getJobCost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ThriftServer_getJobCost_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getJobCost failed: unknown result');
};
var ThriftServerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ThriftServerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ThriftServerProcessor.prototype.process_submitJob = function(seqid, input, output) {
  var args = new ThriftServer_submitJob_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitJob.length === 1) {
    Q.fcall(this._handler.submitJob, args.jobConfPath)
      .then(function(result) {
        var result_obj = new ThriftServer_submitJob_result({success: result});
        output.writeMessageBegin("submitJob", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("submitJob", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitJob(args.jobConfPath, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftServer_submitJob_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("submitJob", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("submitJob", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftServerProcessor.prototype.process_submitJobWithParams = function(seqid, input, output) {
  var args = new ThriftServer_submitJobWithParams_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitJobWithParams.length === 2) {
    Q.fcall(this._handler.submitJobWithParams, args.jobConfPath, args.params)
      .then(function(result) {
        var result_obj = new ThriftServer_submitJobWithParams_result({success: result});
        output.writeMessageBegin("submitJobWithParams", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("submitJobWithParams", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitJobWithParams(args.jobConfPath, args.params, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftServer_submitJobWithParams_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("submitJobWithParams", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("submitJobWithParams", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftServerProcessor.prototype.process_getJobStatus = function(seqid, input, output) {
  var args = new ThriftServer_getJobStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getJobStatus.length === 1) {
    Q.fcall(this._handler.getJobStatus, args.jobId)
      .then(function(result) {
        var result_obj = new ThriftServer_getJobStatus_result({success: result});
        output.writeMessageBegin("getJobStatus", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getJobStatus", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getJobStatus(args.jobId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftServer_getJobStatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getJobStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getJobStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftServerProcessor.prototype.process_cancelJob = function(seqid, input, output) {
  var args = new ThriftServer_cancelJob_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelJob.length === 1) {
    Q.fcall(this._handler.cancelJob, args.jobId)
      .then(function(result) {
        var result_obj = new ThriftServer_cancelJob_result({success: result});
        output.writeMessageBegin("cancelJob", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancelJob", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelJob(args.jobId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftServer_cancelJob_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancelJob", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancelJob", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftServerProcessor.prototype.process_getJobResult = function(seqid, input, output) {
  var args = new ThriftServer_getJobResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getJobResult.length === 1) {
    Q.fcall(this._handler.getJobResult, args.jobId)
      .then(function(result) {
        var result_obj = new ThriftServer_getJobResult_result({success: result});
        output.writeMessageBegin("getJobResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getJobResult", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getJobResult(args.jobId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftServer_getJobResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getJobResult", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getJobResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ThriftServerProcessor.prototype.process_getJobCost = function(seqid, input, output) {
  var args = new ThriftServer_getJobCost_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getJobCost.length === 1) {
    Q.fcall(this._handler.getJobCost, args.jobId)
      .then(function(result) {
        var result_obj = new ThriftServer_getJobCost_result({success: result});
        output.writeMessageBegin("getJobCost", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getJobCost", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getJobCost(args.jobId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ThriftServer_getJobCost_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getJobCost", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getJobCost", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
