//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var TaskCost = module.exports.TaskCost = function(args) {
  this.beginTime = null;
  this.entTime = null;
  this.cost = null;
  if (args) {
    if (args.beginTime !== undefined && args.beginTime !== null) {
      this.beginTime = args.beginTime;
    }
    if (args.entTime !== undefined && args.entTime !== null) {
      this.entTime = args.entTime;
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = args.cost;
    }
  }
};
TaskCost.prototype = {};
TaskCost.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.beginTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cost = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskCost.prototype.write = function(output) {
  output.writeStructBegin('TaskCost');
  if (this.beginTime !== null && this.beginTime !== undefined) {
    output.writeFieldBegin('beginTime', Thrift.Type.STRING, 1);
    output.writeString(this.beginTime);
    output.writeFieldEnd();
  }
  if (this.entTime !== null && this.entTime !== undefined) {
    output.writeFieldBegin('entTime', Thrift.Type.STRING, 2);
    output.writeString(this.entTime);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRING, 3);
    output.writeString(this.cost);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskResult = module.exports.TaskResult = function(args) {
  this.success = true;
  this.msg = 'success';
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
TaskResult.prototype = {};
TaskResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskResult.prototype.write = function(output) {
  output.writeStructBegin('TaskResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

